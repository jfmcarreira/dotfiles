#!/bin/bash

KERNEL_PATH=/usr/src/linux
BACKUP_KERNEL_DIR=~/kernel_configs
MAKEOPTS="$(portageq envvar MAKEOPTS)"

usage()
{
cat << EOF

usage: update-kernel <OPTIONS>

This script build/rebuilds a new or existing kernel

The following <OPTIONS> are available:

 General
   --help       Show this message
   --rebuild    Rebuild selected kernel
   --config     Run makeconfig
   --clean      Clean the kernel before build (by default it is not clean)
   --modules    emerge @module-rebuild after building the kernel

EOF
}


function configure_new_kernel()
{
  local _num_kernels
  local _opt
  cp ${KERNEL_PATH}/.config ${BACKUP_KERNEL_DIR}/kernel-config-$(uname -m)-$(uname -r)

  # Show available kernels
  _num_kernels=$( eselect --brief kernel list | wc -l )
  eselect kernel list

  # Select kernel
  _opt=0
  while [[ $_opt -gt $_num_kernels ]] || [[  $_opt -le 0 ]]
  do
    printf "Select new kernel: "
    read _opt
  done
  eselect kernel set $_opt

  # Create new config
  zcat /proc/config.gz > /usr/src/linux/.config

  make -C ${KERNEL_PATH} silentoldconfig
}

# Use > 1 to consume two arguments per pass in the loop (e.g. each
# argument has a corresponding value to go with it).
# Use > 0 to consume one or more arguments per pass in the loop (e.g.
# some arguments don't have a corresponding value to go with it such
# as in the --default example).
REBUILD_ONLY=0
MAKE_MENU_CONFIG=0
MAKE_CLEAN=0
BUILD_EXTERNAL_MODULES=1
for i in "$@"
do
case $i in
  --rebuild)
    REBUILD_ONLY=1
    ;;
  --config)
    MAKE_MENU_CONFIG=1
    ;;
  --clean)
    MAKE_CLEAN=1
    ;;
  --modules)
    BUILD_EXTERNAL_MODULES=1
    ;;
  --help)
    usage
    exit
    ;;
  *)
    echo "unknow option $i"
  ;;
esac
shift # past argument or value
done

[[ ${REBUILD_ONLY} == 0 ]] && configure_new_kernel
[[ ${MAKE_MENU_CONFIG} == 1 ]] && make -C ${KERNEL_PATH} menuconfig
[[ ${MAKE_CLEAN} == 1 ]] && make -C ${KERNEL_PATH} clean

# Build and install
make -C ${KERNEL_PATH} $MAKEOPTS && make -C ${KERNEL_PATH} modules_install && make -C ${KERNEL_PATH} install && grub-mkconfig -o /boot/grub/grub.cfg
[[ ${BUILD_EXTERNAL_MODULES} == 1 ]] && emerge @module-rebuild


