#!/usr/bin/env bash
set -euo pipefail

# Ensure we're in a Git repository
if ! git rev-parse --is-inside-work-tree &>/dev/null; then
    echo "Not a git repository."
    exit 1
fi

# Function to check if branch's last commit is older than 6 months
is_branch_old() {
    local branch="$1"
    local six_months_ago=$(date -d "6 months ago" +%s 2>/dev/null || date -v-6m +%s)
    local last_commit_date=$(git log -1 --format=%ct "$branch")

    if [ "$last_commit_date" -lt "$six_months_ago" ]; then
        return 0  # true - branch is old
    else
        return 1  # false - branch is recent
    fi
}

# Make sure develop is up to date
git fetch origin
git checkout develop
git pull origin develop

# Get list of branches except develop
branches=$(git branch --format='%(refname:short)' | grep -v '^develop$' | grep -v '^release' )

for branch in $branches; do
    # # Check if branch is older than 6 months
    # if is_branch_old "$branch"; then
    #     echo "Branch '$branch' has no commits in the last 6 months — skipping."
    #     continue
    # fi

    echo "=== Processing branch: $branch ==="

    # Try to checkout the branch
    if ! git checkout "$branch"; then
        echo "Cannot checkout branch '$branch' (may be checked out in another worktree) — skipping."
        continue
    fi

    # Start rebase
    if ! git rebase develop; then
        echo "Conflict detected in branch: $branch — aborting rebase."
        git rebase --abort
        continue
    fi

    # Check if branch is now identical to develop
    if git diff --quiet develop; then
        echo "Branch '$branch' is identical to develop after rebase — skipping further actions."
        git checkout develop
        git branch -D "$branch"
        continue
    fi

    echo "Rebase successful and branch differs from develop."
    # Uncomment to push changes after rebase
    # git push --force-with-lease origin "$branch"
done

# Go back to develop
git checkout develop
echo "All done!"